# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateEmployeeInput {
  cpf: String!
  name: String!
}

input CreateManyEmployeesInput {
  """Array of records to create"""
  employees: [CreateEmployeeInput!]!
}

input CreateOneEmployeeInput {
  """The record to create"""
  employee: CreateEmployeeInput!
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyEmployeesInput {
  """Filter to find records to delete"""
  filter: EmployeeDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteOneEmployeeInput {
  """The id of the record to delete."""
  id: ID!
}

type Employee {
  cpf: String!
  createdAt: DateTime!
  deletedAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
}

type EmployeeAggregateGroupBy {
  cpf: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type EmployeeConnection {
  """Array of nodes."""
  nodes: [Employee!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type EmployeeCountAggregate {
  cpf: Int
  createdAt: Int
  deletedAt: Int
  id: Int
  name: Int
  updatedAt: Int
}

input EmployeeDeleteFilter {
  and: [EmployeeDeleteFilter!]
  cpf: StringFieldComparison
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [EmployeeDeleteFilter!]
  updatedAt: DateFieldComparison
}

type EmployeeDeleteResponse {
  cpf: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input EmployeeFilter {
  and: [EmployeeFilter!]
  cpf: StringFieldComparison
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [EmployeeFilter!]
  updatedAt: DateFieldComparison
}

type EmployeeMaxAggregate {
  cpf: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type EmployeeMinAggregate {
  cpf: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input EmployeeSort {
  direction: SortDirection!
  field: EmployeeSortFields!
  nulls: SortNulls
}

enum EmployeeSortFields {
  cpf
  createdAt
  deletedAt
  id
  name
  updatedAt
}

input EmployeeUpdateFilter {
  and: [EmployeeUpdateFilter!]
  cpf: StringFieldComparison
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [EmployeeUpdateFilter!]
  updatedAt: DateFieldComparison
}

type Mutation {
  createManyEmployees(input: CreateManyEmployeesInput!): [Employee!]!
  createOneEmployee(input: CreateOneEmployeeInput!): Employee!
  deleteManyEmployees(input: DeleteManyEmployeesInput!): DeleteManyResponse!
  deleteOneEmployee(input: DeleteOneEmployeeInput!): EmployeeDeleteResponse!
  updateManyEmployees(input: UpdateManyEmployeesInput!): UpdateManyResponse!
  updateOneEmployee(input: UpdateOneEmployeeInput!): Employee!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type Query {
  employee(
    """The id of the record to find."""
    id: ID!
  ): Employee
  employees(
    """Specify to filter the records returned."""
    filter: EmployeeFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [EmployeeSort!] = []
  ): EmployeeConnection!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateEmployeeInput {
  cpf: String
  id: Int
  name: String
}

input UpdateManyEmployeesInput {
  """Filter used to find fields to update"""
  filter: EmployeeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateEmployeeInput!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateOneEmployeeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateEmployeeInput!
}
