# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddEmployeeTasksToEmployeeInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddTasksToServiceInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateEmployeeInput {
  cpf: String
  name: String
}

input CreateManyEmployeesInput {
  """Array of records to create"""
  employees: [CreateEmployeeInput!]!
}

input CreateManyServicesInput {
  """Array of records to create"""
  services: [CreateServiceInput!]!
}

input CreateManyTasksInput {
  """Array of records to create"""
  tasks: [CreateTaskInput!]!
}

input CreateOneEmployeeInput {
  """The record to create"""
  employee: CreateEmployeeInput!
}

input CreateOneServiceInput {
  """The record to create"""
  service: CreateServiceInput!
}

input CreateOneTaskInput {
  """The record to create"""
  task: CreateTaskInput!
}

input CreateServiceInput {
  dueForecastDate: DateTime
  name: String
}

input CreateTaskInput {
  dueDate: DateTime
  dueForecastDate: DateTime
  name: String
  responsibleId: String
  status: TaskEnum
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyEmployeesInput {
  """Filter to find records to delete"""
  filter: EmployeeDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyServicesInput {
  """Filter to find records to delete"""
  filter: ServiceDeleteFilter!
}

input DeleteManyTasksInput {
  """Filter to find records to delete"""
  filter: TaskDeleteFilter!
}

input DeleteOneEmployeeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneServiceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTaskInput {
  """The id of the record to delete."""
  id: ID!
}

type Employee {
  cpf: String!
  createdAt: DateTime!
  deletedAt: DateTime!
  employeeTasks(
    """Specify to filter the records returned."""
    filter: TaskFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [TaskSort!] = []
  ): EmployeeEmployeeTasksConnection
  id: String!
  name: String!
  updatedAt: DateTime!
}

type EmployeeAggregateGroupBy {
  cpf: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type EmployeeConnection {
  """Array of nodes."""
  nodes: [Employee!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type EmployeeCountAggregate {
  cpf: Int
  createdAt: Int
  deletedAt: Int
  id: Int
  name: Int
  updatedAt: Int
}

input EmployeeDeleteFilter {
  and: [EmployeeDeleteFilter!]
  cpf: StringFieldComparison
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [EmployeeDeleteFilter!]
  updatedAt: DateFieldComparison
}

type EmployeeDeleteResponse {
  cpf: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type EmployeeEmployeeTasksConnection {
  """Array of nodes."""
  nodes: [Task!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input EmployeeFilter {
  and: [EmployeeFilter!]
  cpf: StringFieldComparison
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  employeeTasks: EmployeeFilterTaskFilter
  id: StringFieldComparison
  name: StringFieldComparison
  or: [EmployeeFilter!]
  updatedAt: DateFieldComparison
}

input EmployeeFilterTaskFilter {
  and: [EmployeeFilterTaskFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  dueDate: DateFieldComparison
  dueForecastDate: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [EmployeeFilterTaskFilter!]
  status: TaskEnumFilterComparison
  updatedAt: DateFieldComparison
}

type EmployeeMaxAggregate {
  cpf: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type EmployeeMinAggregate {
  cpf: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input EmployeeSort {
  direction: SortDirection!
  field: EmployeeSortFields!
  nulls: SortNulls
}

enum EmployeeSortFields {
  cpf
  createdAt
  deletedAt
  id
  name
  updatedAt
}

input EmployeeUpdateFilter {
  and: [EmployeeUpdateFilter!]
  cpf: StringFieldComparison
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [EmployeeUpdateFilter!]
  updatedAt: DateFieldComparison
}

type Mutation {
  addEmployeeTasksToEmployee(input: AddEmployeeTasksToEmployeeInput!): Employee!
  addTasksToService(input: AddTasksToServiceInput!): Service!
  createManyEmployees(input: CreateManyEmployeesInput!): [Employee!]!
  createManyServices(input: CreateManyServicesInput!): [Service!]!
  createManyTasks(input: CreateManyTasksInput!): [Task!]!
  createOneEmployee(input: CreateOneEmployeeInput!): Employee!
  createOneService(input: CreateOneServiceInput!): Service!
  createOneTask(input: CreateOneTaskInput!): Task!
  deleteManyEmployees(input: DeleteManyEmployeesInput!): DeleteManyResponse!
  deleteManyServices(input: DeleteManyServicesInput!): DeleteManyResponse!
  deleteManyTasks(input: DeleteManyTasksInput!): DeleteManyResponse!
  deleteOneEmployee(input: DeleteOneEmployeeInput!): EmployeeDeleteResponse!
  deleteOneService(input: DeleteOneServiceInput!): ServiceDeleteResponse!
  deleteOneTask(input: DeleteOneTaskInput!): TaskDeleteResponse!
  removeEmployeeTasksFromEmployee(input: RemoveEmployeeTasksFromEmployeeInput!): Employee!
  removeResponsibleFromTask(input: RemoveResponsibleFromTaskInput!): Task!
  removeServiceFromTask(input: RemoveServiceFromTaskInput!): Task!
  removeTasksFromService(input: RemoveTasksFromServiceInput!): Service!
  setEmployeeTasksOnEmployee(input: SetEmployeeTasksOnEmployeeInput!): Employee!
  setResponsibleOnTask(input: SetResponsibleOnTaskInput!): Task!
  setServiceOnTask(input: SetServiceOnTaskInput!): Task!
  setTasksOnService(input: SetTasksOnServiceInput!): Service!
  updateManyEmployees(input: UpdateManyEmployeesInput!): UpdateManyResponse!
  updateManyServices(input: UpdateManyServicesInput!): UpdateManyResponse!
  updateManyTasks(input: UpdateManyTasksInput!): UpdateManyResponse!
  updateOneEmployee(input: UpdateOneEmployeeInput!): Employee!
  updateOneService(input: UpdateOneServiceInput!): Service!
  updateOneTask(input: UpdateOneTaskInput!): Task!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type Query {
  employee(
    """The id of the record to find."""
    id: ID!
  ): Employee
  employees(
    """Specify to filter the records returned."""
    filter: EmployeeFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [EmployeeSort!] = []
  ): EmployeeConnection!
  service(
    """The id of the record to find."""
    id: ID!
  ): Service
  services(
    """Specify to filter the records returned."""
    filter: ServiceFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [ServiceSort!] = []
  ): ServiceConnection!
  task(
    """The id of the record to find."""
    id: ID!
  ): Task
  tasks(
    """Specify to filter the records returned."""
    filter: TaskFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [TaskSort!] = []
  ): TaskConnection!
}

input RemoveEmployeeTasksFromEmployeeInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveResponsibleFromTaskInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveServiceFromTaskInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveTasksFromServiceInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

type Service {
  createdAt: DateTime!
  deletedAt: DateTime!
  dueForecastDate: DateTime!
  id: String!
  name: String!
  tasks(
    """Specify to filter the records returned."""
    filter: TaskFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [TaskSort!] = []
  ): ServiceTasksConnection
  updatedAt: DateTime!
}

type ServiceAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  dueForecastDate: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type ServiceConnection {
  """Array of nodes."""
  nodes: [Service!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ServiceCountAggregate {
  createdAt: Int
  deletedAt: Int
  dueForecastDate: Int
  id: Int
  name: Int
  updatedAt: Int
}

input ServiceDeleteFilter {
  and: [ServiceDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  dueForecastDate: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [ServiceDeleteFilter!]
  updatedAt: DateFieldComparison
}

type ServiceDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  dueForecastDate: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input ServiceFilter {
  and: [ServiceFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  dueForecastDate: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [ServiceFilter!]
  tasks: ServiceFilterTaskFilter
  updatedAt: DateFieldComparison
}

input ServiceFilterTaskFilter {
  and: [ServiceFilterTaskFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  dueDate: DateFieldComparison
  dueForecastDate: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [ServiceFilterTaskFilter!]
  status: TaskEnumFilterComparison
  updatedAt: DateFieldComparison
}

type ServiceMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  dueForecastDate: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type ServiceMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  dueForecastDate: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input ServiceSort {
  direction: SortDirection!
  field: ServiceSortFields!
  nulls: SortNulls
}

enum ServiceSortFields {
  createdAt
  deletedAt
  dueForecastDate
  id
  name
  updatedAt
}

type ServiceTasksConnection {
  """Array of nodes."""
  nodes: [Task!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input ServiceUpdateFilter {
  and: [ServiceUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  dueForecastDate: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [ServiceUpdateFilter!]
  updatedAt: DateFieldComparison
}

input SetEmployeeTasksOnEmployeeInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetResponsibleOnTaskInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetServiceOnTaskInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetTasksOnServiceInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type Task {
  createdAt: DateTime!
  deletedAt: DateTime!
  dueDate: DateTime
  dueForecastDate: DateTime
  id: String!
  name: String
  responsible: Employee
  service: Service
  status: TaskEnum
  updatedAt: DateTime!
}

type TaskAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  dueDate: DateTime
  dueForecastDate: DateTime
  id: String
  name: String
  status: TaskEnum
  updatedAt: DateTime
}

type TaskConnection {
  """Array of nodes."""
  nodes: [Task!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type TaskCountAggregate {
  createdAt: Int
  deletedAt: Int
  dueDate: Int
  dueForecastDate: Int
  id: Int
  name: Int
  status: Int
  updatedAt: Int
}

input TaskDeleteFilter {
  and: [TaskDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  dueDate: DateFieldComparison
  dueForecastDate: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [TaskDeleteFilter!]
  status: TaskEnumFilterComparison
  updatedAt: DateFieldComparison
}

type TaskDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  dueDate: DateTime
  dueForecastDate: DateTime
  id: String
  name: String
  status: TaskEnum
  updatedAt: DateTime
}

enum TaskEnum {
  END
  INPROGRESS
  OPEN
}

input TaskEnumFilterComparison {
  eq: TaskEnum
  gt: TaskEnum
  gte: TaskEnum
  iLike: TaskEnum
  in: [TaskEnum!]
  is: Boolean
  isNot: Boolean
  like: TaskEnum
  lt: TaskEnum
  lte: TaskEnum
  neq: TaskEnum
  notILike: TaskEnum
  notIn: [TaskEnum!]
  notLike: TaskEnum
}

input TaskFilter {
  and: [TaskFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  dueDate: DateFieldComparison
  dueForecastDate: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [TaskFilter!]
  responsible: TaskFilterEmployeeFilter
  service: TaskFilterServiceFilter
  status: TaskEnumFilterComparison
  updatedAt: DateFieldComparison
}

input TaskFilterEmployeeFilter {
  and: [TaskFilterEmployeeFilter!]
  cpf: StringFieldComparison
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [TaskFilterEmployeeFilter!]
  updatedAt: DateFieldComparison
}

input TaskFilterServiceFilter {
  and: [TaskFilterServiceFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  dueForecastDate: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [TaskFilterServiceFilter!]
  updatedAt: DateFieldComparison
}

type TaskMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  dueDate: DateTime
  dueForecastDate: DateTime
  id: String
  name: String
  status: TaskEnum
  updatedAt: DateTime
}

type TaskMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  dueDate: DateTime
  dueForecastDate: DateTime
  id: String
  name: String
  status: TaskEnum
  updatedAt: DateTime
}

input TaskSort {
  direction: SortDirection!
  field: TaskSortFields!
  nulls: SortNulls
}

enum TaskSortFields {
  createdAt
  deletedAt
  dueDate
  dueForecastDate
  id
  name
  status
  updatedAt
}

input TaskUpdateFilter {
  and: [TaskUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  dueDate: DateFieldComparison
  dueForecastDate: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [TaskUpdateFilter!]
  status: TaskEnumFilterComparison
  updatedAt: DateFieldComparison
}

input UpdateEmployeeInput {
  cpf: String
  id: ID
  name: String
}

input UpdateManyEmployeesInput {
  """Filter used to find fields to update"""
  filter: EmployeeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateEmployeeInput!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyServicesInput {
  """Filter used to find fields to update"""
  filter: ServiceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateServiceInput!
}

input UpdateManyTasksInput {
  """Filter used to find fields to update"""
  filter: TaskUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTaskInput!
}

input UpdateOneEmployeeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateEmployeeInput!
}

input UpdateOneServiceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateServiceInput!
}

input UpdateOneTaskInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTaskInput!
}

input UpdateServiceInput {
  dueForecastDate: DateTime
  id: ID
  name: String
}

input UpdateTaskInput {
  dueDate: DateTime
  dueForecastDate: DateTime
  id: ID
  name: String
  responsibleId: String
  status: TaskEnum
}
